### Теория (вопросы)

1. Что такое поток?
Поток в Java - некая абстракция, которая используется для чтения и записи информации.

2. Какие существуют виды потоков ввода/вывода в Java? Приведите примеры потоков, которые вы знаете.

Потоки для работы с байтами:

--Потоки ввода--
- BufferedInputStream – буферизованный поток ввода. Для более эффективной работы он накапливает считанную информацию в буфере, чтобы не считывать каждый байт отдельно.
- ByteArrayInputStream – поток ввода, считывающий байты из массива;
- DataInputStream – поток ввода, используемый для чтения данных стандартных типов, определенных в Java (int, double, float и т.д.);
- FileInputStream – поток ввода, который читает данные из файла;
- ObjectInputStream – поток ввода, используемый для чтения данных объектов в Java, например объекты класса String;
- SequenceInputStream – поток ввода, состоящий из двух или более потоков ввода, данные из которых читаются поочередно.

--Потоки вывода--
- BufferedOutputStream – буферизованный поток вывода.
- ByteArrayOutputStream – поток вывода, записывающий байты в массив;
- DataOutputStream – поток вывода, используемый для записи данных стандартных типов, определенных в Java (int, float, double и т.п.);
- FileOutputStream – поток вывода, записывающий данные в файл;
- ObjectOutputStream – поток вывода, используемый для записи данных объектов в Java, например объекты класса String;
- PrintStream – поток вывода, содержащий методы print() и println().

Потоки для работы с символами:

--Потоки символьного ввода--
- BufferedReader – буферизованный поток ввода символов;
- CharArrayReader – поток ввода, считывающий символы из массива;
- FileReader – поток ввода связанный с символьным файлом;
- InputStreamReader – поток ввода, превращающий байты в символы;
- LineNumberReader – поток ввода, который подсчитывает строки;
- StringReader – поток ввода, читающий символы из файла построчно.

--Потоки вывода--
- BufferedWriter – буферизованный поток вывода символов;
- CharArrayWriter – поток вывода, записывающий символы в массив;
- FileWriter – поток вывода, записывающий символы в файл;
- OutputStreamWriter – поток вывода, преобразовывающий символы в байты;
- StringWriter – поток вывода, записывающий символы в строку.

3. В каком пакете в Java лежат классы для работы с потоками ввода/вывода?
Все основные потоки лежат в пакете java.io. 

4. Что такое приведение типов в Java?
Приведение типов в Java - процесс преобразования примитивного типа от одного к другому.

5. Какое проверяемое исключение может возникнуть при работе с потоками?
При работе с потоками данных может возникнуть контролируемое исключение - IOException, 
которое необходимо обработать в блоке try catch либо указать это исключение в сигнатуре метода с ключевым словом throws.

6. Почему важно закрывать потоки после их использования?
При завершении работы с потоками необходимо их закрывать, для того, чтобы все выделенные под них ресурсы освобождались. 

7. Какой подход в Java позволяет не закрывать потоки?
Начиная с версии 1.7 в Java появилась возможность укоротить подобные блоки кода. Для этого вместо привычных блоков try, catch, finally предлагается использовать блок try with resources. 
Эта конструкция позволяет не закрывать открытые потоки в блоке finally, вместо этого Java сама об этом позаботится. 
Здесь мы создаем наши потоки в скобках после слова try. 

8. В чем отличие между InputStreamReader и Scanner при работе с консолью?
Scanner позволяет считывать из консоли строку целиком, в то время, как InputStreamReader считывает строку посимвольно. 

9. С помощью какого метода Scanner можно считать строку из консоли?
С помощью метода nextLine.

10. C помощью какого потока можно считать данные из файла?
FileInputStream – поток ввода, который читает данные из файла.

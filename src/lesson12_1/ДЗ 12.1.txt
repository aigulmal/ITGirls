Теория (вопросы)

1. В какой версии Java впервые появились Optional, Stream API  и лямбда-выражения
В версии Java 8

2. Какие существуют этапы работы со стримом?
Есть 3 этапа работы со стримами:

1. Создание стрима
2. Применение промежуточных операторов
3. Применение терминального оператора

3. Какие способы для создания стрима вы знаете?
- Stream.of() - принимает на вход объекты и создает из них стрим;
- Stream.builder() - создание стрима с помощью паттерна “builder” (”строитель”);
- .stream() - получение стрима из коллекции данных.

4. Каких промежуточных операторов вы знаете?
- map() - используется для изменения исходного значения
- filter() - фильтрует значения в стриме
- distinct() - удаляет неуникальные значения
- limit() - ограничивает количество элементов в потоке

5. Что является результатом работы промежуточного оператора?
Результатом его исполнения является преобразованный поток.

6. Каких терминальных операторов вы знаете?
- anyMatch() - выводит в ответ boolean - удовлетворяет ли хотя бы один элемент стрима условию;
- allMatch() - выводит в ответ boolean - удовлетворяют ли все элементы стрима условию;
- noneMatch() - выводит в ответ boolean - все ли элементы стрима не удовлетворяют условию;
- collect() - получаем в ответ коллекцию элементов;
- count() - получаем в ответ количество элементов в стриме;
- findAny() - получаем в результате Optional;
- forEach() - запускает итерацию по стриму и ничего не выводит в ответ;
- reduce()- получает из стрима одно значение, основываясь на лямбде.

7. Что является результатом работы терминального оператора?
Результатом работы терминального оператора является итоговое выражение, 
после получения которого работа с потоком больше не возможна.

8. Сколько промежуточных и терминальных операторов можно применить для одного стрима?
Для одного стрима можно использовать множество различных промежуточных операторов.
Для одного стрима можно использовать только один терминальный оператор.

9. Что такое лямбда выражение?
Лямбда-выражение - упрощённая запись анонимного класса, 
реализующего функциональный интерфейс(интерфейс, в котором объявлен только один абстрактный метод).

10. Что такое Optional? Для чего он нужен?
Optional - нововведение Java 8. 
Используется в случаях когда неизвестно содержит ли объект какое-то значение, либо равен null.
Помогает избежать исключения NullPointerException, так как мы получаем обертку Optional, а не само значение. 

11. Как получить значение из Optional?
Метод get — простейший способ получения значения объекта Optional.

Пример:
Optional<Integer> numberOptional = Stream.of(1, 2, 3, 4, 5).findAny();
        if (numberOptional.isPresent()) {
            Integer number = numberOptional.get();
            //далее код
        }